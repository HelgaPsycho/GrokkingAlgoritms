/* РЕКУРСИЯ
 
 Рекурсия - вызов функцией саму себя
 
 Задачу, в которой нужно решать задачу, выполняя повторяющееся действие неопределнное количество раз можно с помощью цикла While либо Рекурсии (повторного вызова функции самой собой).

 
 Рекурсия состоит мз двух частей
 - Базовый случай - функция не вызывает себя, чтобы предотвратить зацикливание
 - Рекурсивный случай - функция вызывает сама себя
 */

func countDown (i: Int) {
    print (i)
    if i <= 1{
        //базовый случай
        return
    }
    else {
        //рекурсивный случай
        countDown (i: i - 1)}
}

countDown(i: 7)

// Вычисление факториала с помощью рекурсии.
// 5! = 5*4*3*2*1

func factorial(x: Int) -> Int {
    if x == 1 {
        return 1
    } else {
        return x * factorial(x: (x - 1))
    }
}

print(factorial(x: 5))

/*
 УПРАЖНЕНИЯ
 1. Предположим, вы случайно написали рекурсивную функцию, которая бесконечно вызывает саму себя. Как вы уже видели, компьютер вы- деляет память в стеке при каждом вызове функции. А что произойдет со стеком при бесконечном выполнении рекурсии?
 будет занимать все больше и больше памяти и в конце концов программа завершится с ошибкой переполнения стека
 */
