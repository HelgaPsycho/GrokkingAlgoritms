/*
 ГРАФ
 - структура, моделирующая набор связей. состоит из узлов и ребер
  ______               ______
 | УЗЕЛ | ---РЕБРО--> | УЗЕЛ |
  ------               ------
 - узел может быть соединнен с неколькими узлами  "соседями"
 
 ПОИСК В ШИРИНУ
 отвечает на 2 вопроса
 1 - существует ли путь от узла А к узлу В
 2 - как выглядит кратчаший путь от узла А к узлу В
 
 Связи делятся на связи:
 1го уровня
 2го уровня ...
 
 Веачале должны проверятся все связи первого уровня
 Связи проверяются в порядке их добавления, это помогает осущестить очередь
 
 ОЧЕРЕДЬ
 структура FIFO - first input first output
 операции:
 - постановка в очередь
 - извлечение из очереди
 
 РЕАЛИЗАЦИЯ ГРАФА
 отношения между узлами можно выразить с помощью хэш - таблицы
 ключ - значение  == узел - соседи

 */
var graph = [String: [String]]()
graph["You"] = ["Alice", " Bob", "Claire"]
graph["Bob"] = ["Peggi", "Anuge"]
graph["Claire"] = ["Jonny", "Tom"]
graph["Alice"] = ["Peggi"]
graph["Peggi"] = []
graph["Anuge"] = []
graph["Jonny"] = []
graph["Tom"] = []

/* ВИДЫ ГРАФОВ:
 
НАПРАВЛЕННЫЕ - отношения действуют только в одну сторону
  ____         ________
 |Росс|-----> | Рейчел |
  ----         --------
 
 НЕНАПРАВЛЕННЫЕ
 ____          ________
|Росс|--------| Рейчел |
 ----          --------
 
 */
